#include "OpenGL.h"namespace opengl {	OpenGL::OpenGL(unsigned int width, unsigned int height)	{		window = new Window(width, height);		window->Initialise();		camera = new Camera(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), -90.0f, -10.0f, 5.0f, 0.05f);		geometryShader.CreateFromFiles("Shaders/geometry_shader.vert", "Shaders/geometry_shader.frag");		directionalShadowShader.CreateFromFiles("Shaders/directional_shadow_map.vert", "Shaders/directional_shadow_map.frag");		screenShader.CreateFromFiles("Shaders/anti_aliasing.vert", "Shaders/anti_aliasing.frag");		mainLight = new DirectionalLight();	}	void OpenGL::CameraControl(float deltaTime)	{		camera->keyControl(window->getKeys(), deltaTime);		camera->mouseControl(window->getXChange(), window->getYChange());	}	void OpenGL::DirectionalShadowPass()	{		directionalShadowShader.UseShader();		glViewport(0, 0, mainLight->GetShadowMap()->GetShadowWidth(), mainLight->GetShadowMap()->GetShadowHeight());		// Calls glBindFrameBuffer(GL_FRAMEBUFFER, FBO) in ShadowMap		mainLight->GetShadowMap()->BindFrameBuffer();		glClear(GL_DEPTH_BUFFER_BIT);		glm::mat4 lightTransform = mainLight->CalculateLightTransform();		directionalShadowShader.setMat4("directionalLightTransform", lightTransform);		RenderScene(&directionalShadowShader);		glBindFramebuffer(GL_FRAMEBUFFER, 0);	}	void OpenGL::RenderPass(glm::mat4 projectionMatrix, glm::mat4 viewMatrix)	{		geometryShader.UseShader();		glViewport(0, 0, window->getBufferWidth(), window->getBufferHeight());		geometryShader.setMat4("projection", projectionMatrix);		geometryShader.setMat4("view", viewMatrix);		geometryShader.setVec3("eyePosition", glm::vec3(camera->getCameraPosition().x, camera->getCameraPosition().y, camera->getCameraPosition().z));		geometryShader.setInt("theTexture", 0); //GL_TEXTURE0		mainLight->GetShadowMap()->Read(GL_TEXTURE1);		geometryShader.setInt("directionalShadowMap", 1);		geometryShader.setInt("normalMap", 2);		geometryShader.SetDirectionalLight(mainLight);		//geometryShader.SetPointLights(pointLights, pointLightCount);		//glm::mat4 lightTransform = mainLight.CalculateLightTransform();		//geometryShader.setMat4("directionalLightTransform", lightTransform);		RenderScene(&geometryShader);	}	/*	void OpenGL::UpdateObjects(std::vector<Vertex> meshList, DirectionalLight light, PointLight* pointLights)	{		this->pointLights = pointLights;		this->mainLight = &light;		this->meshList = meshList;	}	*/	OpenGL::~OpenGL()	{		delete camera;		delete window;	}}